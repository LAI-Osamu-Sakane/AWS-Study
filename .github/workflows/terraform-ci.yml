name: 'Terraform-CI'

on:
  push:
    branches:
      - main
    paths:
      - 'terraform-test/*.tf'
      - 'terraform-test/*.tftest.hcl'
      - '.github/workflows/*.yml'
      - '.github/workflows/*.yaml'
  pull_request:
      paths:
      - 'terraform-test/*.tf'
      - 'terraform-test/*.tftest.hcl'
      - '.github/workflows/*.yml'
      - '.github/workflows/*.yaml'
      types: [opened, synchronize]
  workflow_call:
    inputs:
      enable_pr_comment:
        description: 'Enable PR comment'
        required: false
        default: true
        type: 'boolean'

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        working-directory: terraform-test
        # shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4
      

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      # uses: hashicorp/setup-terraform@v1
      uses: hashicorp/setup-terraform@v3
      with:
        # cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_version: 1.11.3

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Version
      run: terraform --version


    
    - uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    - name: Terraform validate
      run: terraform validate
      
#     # Generates an execution plan for Terraform
#     # - name: Terraform Plan
#     #   run: terraform plan -input=false

    - name: Terraform test
      run: terraform test

    # - name: CommentTest
    #   env:
    #     # PR_NUMBER: ${{ github.event.number }}
    #     # PR_TITLE: ${{ github.event.pull_request.title }}
    #     PR_NUMBER: ${{ github.event.pull_request.number }}
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   run: |
    #     echo "PRへのコメント内容をファイルに出力する" > /tmp/comment
    #     gh pr comment "${PR_NUMBER}" -F /tmp/comment
#       # On push to "main", build or change infrastructure according to Terraform configuration files
#       # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
#     # - name: Terraform Apply
#     #   if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
#     #   run: terraform apply -auto-approve -input=false

    # - id: diff-check
    #   if: github.event.action == 'synchronize'
    #   run: echo "diff-count=$(git diff ${{ github.event.before }} ${{ github.event.after }} --name-only --relative=hoge | wc -l)" >> $GITHUB_OUTPUT
    # - id: no-diff-check
    #   if: github.event.action != 'synchronize'
    #   run: echo "diff-count=1" >> $GITHUB_OUTPUT
    # - uses: actions/github-script@v6
    #   if: steps.diff-check.outputs.diff-count > 0 || steps.no-diff-check.outputs.diff-count > 0
    #   with:
    #     script: |
    #       github.rest.issues.createComment({
    #         issue_number: context.issue.number,
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         body: `hoge ディレクトリ配下のファイルが編集されました。`
    #       })

